alias CONSOLE_BANK -4
alias OUT_BUFFER_START $MMM
alias OUT_BUFFER_LEN_ADDR $Emj
alias CONSOLE_DISPLAY_MODE_ADDR $Eml
alias CONSOLE_STATE_ADDR $Emm

/*
function: print_int(B: int)
Print to console output the contents of register B as a integer.
Assumes the BANK has been set to CONSOLE_BANK (-4)
*/
print_int
{
    // store console mode addr in reg (saves memory!)
    PUSH G;
    SET G, CONSOLE_DISPLAY_MODE_ADDR;
    
    // save current console mode into register E
    PUSH E;
    LOAD E, [G];
    
    // set console mode to INT
    PUSH D;
    SET D, 1;
    SAVE D, [G];
    
    // put B into the output buffer
    SAVE B, OUT_BUFFER_START;

    // set output buffer length to 1
    SET D, OUT_BUFFER_LEN_ADDR;
    PUSH C;
    SET C, 1;
    SAVE C, [D];

    // print the output buffer to console stdout
    CALL flush_output;

    // reset console mode, clean stack and return
    POP C; POP D;
    SAVE E, [G];
    POP E; POP G;
    RET;
}

/*
function: print_string(B: string_ptr)
Print a zero terminated string to the console.
*/
print_string
{
    // store console mode addr in reg (saves memory!)
    PUSH G;
    SET G, CONSOLE_DISPLAY_MODE_ADDR;
    
    // save current console mode into register E
    PUSH E;
    LOAD E, [G];
    
    // set console mode to CHAR
    PUSH D;
    SET D, 2;
    SAVE D, [G];

    // write string to output buffer
    PUSH H;
    SET H, OUT_BUFFER_START;
    !string_write_loop
    LOAD D, [B];
    SAVE D, [H];
    INC B; INC H;
    CPZ D; JPNZ string_write_loop // break out of loop when we encounter a \0 char

    // print the output buffer to console stdout
    CALL flush_output;

    // reset console mode, clean stack and return
    POP H; POP D;
    SAVE E, [G];
    POP E; POP G;
    RET;
    
}

/*
function: flush_output
Request the console to flush output and wait until the console is free again.
*/
flush_output
{
    PUSH B; PUSH D;
    
    // request print
    SET D, CONSOLE_STATE_ADDR;
    LOAD B, [D];
    OR B, 3; // set out_request_flag to + (or = max(trit1, trit2))
    SAVE B, [D];

    // loop until print is finished
    !print_loop
    LOAD B, [D];
    STAR B, 1; // set B equal to status flag
    CPZ B; JPZ print_loop; // if status flag = 0, console is busy, stay in loop

    // restore stack and return
    POP D; POP B;
    RET;
}

/*
function: print_newline
Print a single newline char to output
*/
print_newline
{
    // write newline char to output buffer
    !newline "\n"
    CALL print_string newline
    RET;
}
    